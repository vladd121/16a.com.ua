// SCSS variables are information about icon's compiled state, stored under its original file name
//
// .icon-home {
//   width: $icon-home-width;
// }
//
// The large array-like variables contain all information about a single icon
// $icon-home: x y offset_x offset_y width height total_width total_height image_path;
//
// At the bottom of this section, we provide information about the spritesheet itself
// $spritesheet: width height image $spritesheet-sprites;
$icon-arrows-name: 'icon-arrows';
$icon-arrows-x: 65px;
$icon-arrows-y: 37px;
$icon-arrows-offset-x: -65px;
$icon-arrows-offset-y: -37px;
$icon-arrows-width: 18px;
$icon-arrows-height: 9px;
$icon-arrows-total-width: 102px;
$icon-arrows-total-height: 69px;
$icon-arrows-image: '../image/sprite.png';
$icon-arrows: (65px, 37px, -65px, -37px, 18px, 9px, 102px, 69px, '../image/sprite.png', 'icon-arrows', );
$icon-life-name: 'icon-life';
$icon-life-x: 37px;
$icon-life-y: 0px;
$icon-life-offset-x: -37px;
$icon-life-offset-y: 0px;
$icon-life-width: 30px;
$icon-life-height: 32px;
$icon-life-total-width: 102px;
$icon-life-total-height: 69px;
$icon-life-image: '../image/sprite.png';
$icon-life: (37px, 0px, -37px, 0px, 30px, 32px, 102px, 69px, '../image/sprite.png', 'icon-life', );
$icon-lviv-name: 'icon-lviv';
$icon-lviv-x: 35px;
$icon-lviv-y: 37px;
$icon-lviv-offset-x: -35px;
$icon-lviv-offset-y: -37px;
$icon-lviv-width: 25px;
$icon-lviv-height: 32px;
$icon-lviv-total-width: 102px;
$icon-lviv-total-height: 69px;
$icon-lviv-image: '../image/sprite.png';
$icon-lviv: (35px, 37px, -35px, -37px, 25px, 32px, 102px, 69px, '../image/sprite.png', 'icon-lviv', );
$icon-vodafon-name: 'icon-vodafon';
$icon-vodafon-x: 72px;
$icon-vodafon-y: 0px;
$icon-vodafon-offset-x: -72px;
$icon-vodafon-offset-y: 0px;
$icon-vodafon-width: 30px;
$icon-vodafon-height: 32px;
$icon-vodafon-total-width: 102px;
$icon-vodafon-total-height: 69px;
$icon-vodafon-image: '../image/sprite.png';
$icon-vodafon: (72px, 0px, -72px, 0px, 30px, 32px, 102px, 69px, '../image/sprite.png', 'icon-vodafon', );
$icon-kievstar-name: 'icon_kievstar';
$icon-kievstar-x: 0px;
$icon-kievstar-y: 37px;
$icon-kievstar-offset-x: 0px;
$icon-kievstar-offset-y: -37px;
$icon-kievstar-width: 30px;
$icon-kievstar-height: 32px;
$icon-kievstar-total-width: 102px;
$icon-kievstar-total-height: 69px;
$icon-kievstar-image: '../image/sprite.png';
$icon-kievstar: (0px, 37px, 0px, -37px, 30px, 32px, 102px, 69px, '../image/sprite.png', 'icon_kievstar', );
$up-arrow-name: 'up-arrow';
$up-arrow-x: 0px;
$up-arrow-y: 0px;
$up-arrow-offset-x: 0px;
$up-arrow-offset-y: 0px;
$up-arrow-width: 32px;
$up-arrow-height: 32px;
$up-arrow-total-width: 102px;
$up-arrow-total-height: 69px;
$up-arrow-image: '../image/sprite.png';
$up-arrow: (0px, 0px, 0px, 0px, 32px, 32px, 102px, 69px, '../image/sprite.png', 'up-arrow', );
$spritesheet-width: 102px;
$spritesheet-height: 69px;
$spritesheet-image: '../image/sprite.png';
$spritesheet-sprites: ($icon-arrows, $icon-life, $icon-lviv, $icon-vodafon, $icon-kievstar, $up-arrow, );
$spritesheet: (102px, 69px, '../image/sprite.png', $spritesheet-sprites, );

// The provided mixins are intended to be used with the array-like variables
//
// .icon-home {
//   @include sprite-width($icon-home);
// }
//
// .icon-email {
//   @include sprite($icon-email);
// }
//
// Example usage in HTML:
//
// `display: block` sprite:
// <div class="icon-home"></div>
//
// To change `display` (e.g. `display: inline-block;`), we suggest using a common CSS class:
//
// // CSS
// .icon {
//   display: inline-block;
// }
//
// // HTML
// <i class="icon icon-home"></i>
@mixin sprite-width($sprite) {
  width: nth($sprite, 5);
}

@mixin sprite-height($sprite) {
  height: nth($sprite, 6);
}

@mixin sprite-position($sprite) {
  $sprite-offset-x: nth($sprite, 3);
  $sprite-offset-y: nth($sprite, 4);
  background-position: $sprite-offset-x  $sprite-offset-y;
}

@mixin sprite-image($sprite) {
  $sprite-image: nth($sprite, 9);
  background-image: url(#{$sprite-image});
}

@mixin sprite($sprite) {
  @include sprite-image($sprite);
  @include sprite-position($sprite);
  @include sprite-width($sprite);
  @include sprite-height($sprite);
}

// The `sprites` mixin generates identical output to the CSS template
//   but can be overridden inside of SCSS
//
// @include sprites($spritesheet-sprites);
@mixin sprites($sprites) {
  @each $sprite in $sprites {
    $sprite-name: nth($sprite, 10);
    .#{$sprite-name} {
      @include sprite($sprite);
    }
  }
}
